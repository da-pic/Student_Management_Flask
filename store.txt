
DELIMITER $$

CREATE PROCEDURE GetAdministrativeClassList()
BEGIN
    SELECT 
        administrative_class, 
        COUNT(student_id) AS student_count
    FROM Student
    GROUP BY administrative_class;
END $$

DELIMITER ;

DELIMITER $$
CREATE PROCEDURE AuthenticateAdmin(
    IN p_admin_id VARCHAR(50),
    IN p_password VARCHAR(255)
)
BEGIN
    SELECT admin_id, password
    FROM admin
    WHERE admin_id = p_admin_id AND password = p_password;
END$$
DELIMITER ;


DELIMITER $$

CREATE PROCEDURE AuthenticateStudent(
    IN p_student_id VARCHAR(20),
    IN p_password VARCHAR(255)
)
BEGIN
    SELECT student_id, student_email
    FROM student
    WHERE student_id = p_student_id AND password = p_password;
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE get_student_password(
    IN p_student_id VARCHAR(50)
)
BEGIN
    SELECT password 
    FROM student 
    WHERE student_id = p_student_id;
END $$

DELIMITER ;

DELIMITER $$
CREATE PROCEDURE ChangeStudentPassword(
    IN p_student_id VARCHAR(50),
    IN p_new_password VARCHAR(255)
)
BEGIN
    UPDATE student
    SET password = p_new_password
    WHERE student_id = p_student_id;
END$$
DELIMITER ;

DELIMITER $$

CREATE PROCEDURE GetAllCourseClasses()
BEGIN
    SELECT
        c.course_id,
        c.course_name,
        c.volume,
        cc.course_class_id,
        l.lecturer_name
    FROM course_class cc
    JOIN course c ON cc.course_id = c.course_id
    JOIN lecturer l ON cc.lecturer_id = l.lecturer_id;
END$$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE GetRegisteredCourses(
    IN p_student_id VARCHAR(50)
)
BEGIN
    SELECT
        c.course_id,
        c.course_name,
        c.volume,
        cc.course_class_id,
        l.lecturer_name
    FROM enrollment e
    JOIN course_class cc ON e.course_class_id = cc.course_class_id
    JOIN course c ON cc.course_id = c.course_id
    JOIN lecturer l ON cc.lecturer_id = l.lecturer_id
    WHERE e.student_id = p_student_id;
END$$

DELIMITER ;


DELIMITER $$

CREATE PROCEDURE GetCourseInfoByClassId(
    IN p_course_class_id VARCHAR(20)
)
BEGIN
    SELECT cc.course_id, c.course_name
    FROM course_class cc
    JOIN course c ON cc.course_id = c.course_id
    WHERE cc.course_class_id = p_course_class_id;
END$$

DELIMITER ;


DELIMITER $$

CREATE PROCEDURE CheckDuplicateEnrollment(
    IN p_student_id VARCHAR(50),
    IN p_course_id VARCHAR(50)
)
BEGIN
    SELECT e.course_class_id
    FROM enrollment e
    JOIN course_class cc ON e.course_class_id = cc.course_class_id
    WHERE e.student_id = p_student_id
      AND cc.course_id = p_course_id;
END$$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE RemoveOldEnrollment(
    IN p_student_id VARCHAR(50),
    IN p_course_class_id VARCHAR(50)
)
BEGIN
    -- Xóa lớp đã đăng ký trong bảng enrollment
    DELETE FROM enrollment
    WHERE student_id = p_student_id
      AND course_class_id = p_course_class_id;

    -- Xóa điểm tương ứng trong bảng score
    DELETE FROM score
    WHERE student_id = p_student_id
      AND course_class_id = p_course_class_id;
END$$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE AddNewEnrollment(
    IN p_student_id VARCHAR(50),
    IN p_course_class_id VARCHAR(50)
)
BEGIN
    -- Thêm vào bảng enrollment
    INSERT INTO enrollment (student_id, course_class_id)
    VALUES (p_student_id, p_course_class_id);

    -- Thêm vào bảng score với điểm mặc định = 0
    INSERT INTO score (student_id, course_class_id, attendance_scr, midterm_scr, finalterm_scr)
    VALUES (p_student_id, p_course_class_id, 0.0, 0.0, 0.0);
END$$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE CancelEnrollment(
    IN p_student_id VARCHAR(50),
    IN p_course_class_id VARCHAR(50)
)
BEGIN
    -- Xóa bản ghi trong bảng enrollment
    DELETE FROM enrollment
    WHERE student_id = p_student_id
      AND course_class_id = p_course_class_id;

    -- Xóa bản ghi trong bảng score
    DELETE FROM score
    WHERE student_id = p_student_id
      AND course_class_id = p_course_class_id;
END$$

DELIMITER ;

DELIMITER //
CREATE PROCEDURE get_timetable_by_week(
    IN p_student_id VARCHAR(20),
    IN p_week INT
)
BEGIN
    SELECT 
        c.course_name AS subject_name,
        cc.class_day,
        cc.start_time,
        cc.end_time,
        cc.class_room,
        cc.week_start,
        cc.week_end,
        l.lecturer_name AS teacher
    FROM Enrollment e
    JOIN Course_Class cc ON e.course_class_id = cc.course_class_id
    JOIN Course c ON cc.course_id = c.course_id
    JOIN Lecturer l ON cc.lecturer_id = l.lecturer_id
    WHERE e.student_id = p_student_id
      AND p_week BETWEEN cc.week_start AND cc.week_end
    ORDER BY cc.class_day, cc.start_time;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE get_student_by_id(IN p_student_id VARCHAR(20))
BEGIN
    SELECT * FROM Student WHERE student_id = p_student_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE get_students_by_class(IN p_class VARCHAR(50))
BEGIN
    SELECT * 
    FROM Student
    WHERE administrative_class = p_class;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE get_student_scores(IN p_student_id VARCHAR(20))
BEGIN
    SELECT 
        c.course_name,
        c.course_id,
        sc.attendance_scr,
        sc.midterm_scr,
        sc.finalterm_scr
    FROM Score sc
    JOIN Course_Class cc ON sc.course_class_id = cc.course_class_id
    JOIN Course c ON c.course_id = cc.course_id
    WHERE sc.student_id = p_student_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE get_student_course_classes(IN p_student_id VARCHAR(20))
BEGIN
    SELECT 
        c.course_name, 
        cc.course_class_id, 
        l.lecturer_name, 
        c.volume
    FROM Enrollment enr
    JOIN Course_Class cc ON enr.course_class_id = cc.course_class_id
    JOIN Lecturer l ON l.lecturer_id = cc.lecturer_id
    JOIN Course c ON c.course_id = cc.course_id
    WHERE enr.student_id = p_student_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE get_course_class_detail(IN p_course_class_id VARCHAR(20))
BEGIN
    SELECT 
        cc.course_class_id, 
        c.volume, 
        c.course_id, 
        c.course_name, 
        l.lecturer_id, 
        l.lecturer_name, 
        l.lecturer_contact, 
        l.lecturer_email
    FROM Course_Class cc
    JOIN Course c ON cc.course_id = c.course_id
    JOIN Lecturer l ON cc.lecturer_id = l.lecturer_id
    WHERE cc.course_class_id = p_course_class_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE get_students_in_course_class(IN p_course_class_id VARCHAR(20))
BEGIN
    SELECT 
        s.student_id, 
        s.administrative_class, 
        s.student_name, 
        s.student_gender,
        s.student_bd, 
        s.student_address, 
        s.student_contact, 
        s.student_email, 
        s.CPA
    FROM Enrollment e
    JOIN Student s ON e.student_id = s.student_id
    WHERE e.course_class_id = p_course_class_id
    ORDER BY s.student_name;
END //
DELIMITER ;